# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
# vim: set filetype=sh sw=3 sts=3 expandtab autoindent:
#
# bup handler script for backupninja
# requires the bup binary, and ssh for remote connections
#

### FUNCTIONS ###

if [ -z "$BUP" ]; then
   if [ -x /usr/bin/bup ]; then
      BUP=/usr/bin/bup
   else
      fatal "executable path not defined in 'BUP' configuration option"
   fi
fi
[ -x "$BUP" ] || fatal "bup executable path is not executable or does not exist."

function get_version() {
   # given no arguments, returns the local version.
   # given a user and host, returns the remote version.
   # if user or host is missing, returns the local version.
   local version
   if [ "$#" -lt 2 ]; then
      debug "$BUP --version"
      echo `$BUP --version`
   else
      local user=$1
      local host=$2
      debug "ssh $host -l $user 'bup --version'"
      version=`ssh $host -l $user "bup --version"`
      if [ $? = 127 ]; then
         fatal "Unable to execute bup on remote server. It probably isn't installed"
      else
         echo "$version"
      fi
   fi
}

### GET CONFIG ###

getconf ignore_version no
getconf testconnect yes

setsection source
getconf path
getconf exclude
getconf exclude_rx

setsection dest
getconf bupdir
getconf branch

# See possible values in bup.helper, or in a config file generated by it.
getconf type local; desttype=$type
# The three values below are only useful if the backup is remote, in other
# words, if the type is one of "remote" or "on".
#
# The user is optional. If none is specified, we'll be connecting to remote
# server as the same user as the one running this backup job (most probably
# root) or if you have an entry in your ~/.ssh/config file that specifies a
# user for the host, it will be used.
getconf remote_bupdir
getconf host localhost
getconf user

PATH_LIST=$(echo $path | sed -e 's/\n/ /g')
EXCLUDE_LIST=
if [ -n "$exclude" ]; then
   EXCLUDE_LIST=$(echo $exclude | sed -e '1s/^/--exclude=/' -e 's/[\n ]/ --exclude=/g')
fi
EXCLUDE_RX_LIST=
if [ -n "$exclude_rx" ]; then
   EXCLUDE_RX_LIST=$(echo $exclude_rx | sed -e '1s/^/--exclude-rx=/' -e 's/[\n ]/ --exclude-rx=/g')
fi

debug "backup type is set to '$desttype'"

[ -n "$test" ] || test=0

REMOTE_URL=
if [ "$desttype" != "local" ]; then
   if [ "$testconnect" = "yes" ] || [ "${test}" -eq 1 ]; then
      ssh_test_connection $user $host
   fi

   HOST_SPEC="$host"

   if [ -n "$user" ]; then
      HOST_SPEC="${user}@$host"
   fi

   REMOTE_URL="-r $HOST_SPEC:$remote_bupdir"

   if [ "${test}" -eq 0 ]; then
      # Even though we're already doing this in bup.helper, this gives users the
      # possibility to just move the bup repository out of the way in case of
      # corruption and let the next backup run automatically create a new repository.
      #
      # calling bup init on an already existing repository is safe.
      debug "Initializing remote bupdir if it does not exist"
      ssh $user@$host "mkdir -p $remote_bupdir && bup -d '$remote_bupdir' init"
      if [ "$?" != "0" ]; then
         fatal "An error occurred while initializing the remote repository."
      fi
   fi
else
   mkdir -p $bupdir && bup -d "$bupdir" init
   if [ "$?" != "0" ]; then
     fatal "An error occurred while initializing the remote repository."
   fi
fi

if [ -n "$bupdir" ]; then
   BUP_DIR="$bupdir"
   export BUP_DIR
   debug "BUP_DIR set to: $bupdir"
fi

### CHECK CONFIG ###
if [ -z "$path" ]; then
   fatal "No source path was given."
fi

if [ -z "$branch" ]; then
   fatal "The backup branch was not specified."
fi

if [ -z "$bupdir" ]; then
   debug "No bupdir specified: using the default location of ~/.bup !"
fi

if [ "$ignore_version" != "yes" ]; then
   # see that bup has the same version at the source and destination
   sourceversion=`get_version`
   if [ "$desttype" != "local" ]; then
      destversion=`get_version $user $host`
      if [ "$sourceversion" != "$destversion" ]; then
         fatal "bup does not have the same version at the source and at the destination."
      fi
   fi
fi

### REMOVE OLD BACKUPS ###
# This is not yet implemented in bup itself.

### EXECUTE ###

if [ "${test}" -eq 0 ]; then
   if [ "$desttype" = "on" ]; then
      debug "$BUP on $HOST_SPEC index -u $EXCLUDE_LIST $EXCLUDE_RX_LIST $PATH_LIST"
      if output=$($BUP on $HOST_SPEC -d "$remote_bupdir" index -u $EXCLUDE_LIST $EXCLUDE_RX_LIST $PATH_LIST 2>&1); then
         debug $output
         info "Indexing completed successfully"
      else
         warning $output
         warning "bup index encountered errors"
      fi

      debug "$BUP on $HOST_SPEC save -n $branch $PATH_LIST"
      if output=$($BUP on $HOST_SPEC -d "$remote_bupdir" save -n $branch $PATH_LIST 2>&1); then
         debug $output
         info "Successfullly finished backing up"
      else
         warning $output
         warning "bup save encountered errors"
      fi
   else
      debug "$BUP index -u $EXCLUDE_LIST $EXCLUDE_RX_LIST $PATH_LIST"
      if output=$($BUP index -u $EXCLUDE_LIST $EXCLUDE_RX_LIST $PATH_LIST 2>&1); then
         debug $output
         info "Indexing completed successfully"
      else
         warning $output
         warning "bup index encountered errors"
      fi

      debug "$BUP save $REMOTE_URL -n $branch $PATH_LIST"
      if output=$($BUP save $REMOTE_URL -n $branch $PATH_LIST 2>&1); then
         debug $output
         info "Successfullly finished backing up"
      else
         warning $output
         warning "bup save encountered errors"
      fi
   fi
fi
